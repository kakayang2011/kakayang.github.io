---
layout:     post
title:      js方法和native方法互调解析
subtitle:   hybrid桥的实现原理
date:       2018-09-18
author:     BY
header-img: img/post-bg-ios9-web.jpg
catalog: true
tags:
    - Android 知识总结
    - hybrid
    - 源码解析
---

## 变量含义

messageHandlers：存放native方法名和方法处理Handler的映射（本地方法池）responseCallbacks：存放js方法名和responseCallback的映射（js方法的回调）

## native调用js方法

- 调用入口

  ```
  webView.callHandler("functionInJs", new Gson().toJson(user), new CallBackFunction() {
    @Override
    public void onCallBack(String data) {
  
    }
  });
  ```

- doSend方法，创建Message，包含对js方法调用包含的信息（js方法名，传递的数据，回调的callbackId），并将callbackId和jsCallback保存到responseCallbacks中。最后将Message入队。

  ```
  private void doSend(String handlerName, String data, CallBackFunction responseCallback) {
    Message m = new Message();
    if (!TextUtils.isEmpty(data)) {
      m.setData(data);
    }
    if (responseCallback != null) {
      String callbackStr = String.format(BridgeUtil.CALLBACK_ID_FORMAT,
          ++uniqueId + (BridgeUtil.UNDERLINE_STR + SystemClock.currentThreadTimeMillis()));
      responseCallbacks.put(callbackStr, responseCallback);
      m.setCallbackId(callbackStr);
    }
    if (!TextUtils.isEmpty(handlerName)) {
      m.setHandlerName(handlerName);
    }
    queueMessage(m);
  }
  ```

- dispatchMessage中调用loadUrl方法，调用js方法javascript:WebViewJavascriptBridge._handleMessageFromNative

  ```
  void dispatchMessage(Message m) {
    String messageJson = m.toJson();
    //escape special characters for json string  为json字符串转义特殊字符
    messageJson = messageJson.replaceAll("(\\\\)([^utrn])", "\\\\\\\\$1$2");
    messageJson = messageJson.replaceAll("(?<=[^\\\\])(\")", "\\\\\"");
    messageJson = messageJson.replaceAll("(?<=[^\\\\])(\')", "\\\\\'");
    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);
    // 必须要找主线程才会将数据传递出去 --- 划重点
    if (Thread.currentThread() == Looper.getMainLooper().getThread()) {
      this.loadUrl(javascriptCommand);
    }
  }
  ```

- js一侧

  - [ ] 首先JS的方法是注入了一段js代码

    ```
    if (BridgeWebView.toLoadJs != null) {
        BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);
    }
    ```

  - [ ] 创建了一个WebViewJavascriptBridge对象，制定了一些方法

    ```
    var WebViewJavascriptBridge = window.WebViewJavascriptBridge = {
        init: init,
        send: send,
        registerHandler: registerHandler,
        callHandler: callHandler,
        _fetchQueue: _fetchQueue,
        _handleMessageFromNative: _handleMessageFromNative
    };
    ```

  - [ ] _handleMessageFromNative方法，消息入队后又调用了_dispatchMessageFromNative方法

    ```
    //提供给native调用,receiveMessageQueue 在会在页面加载完后赋值为null,所以
    function _handleMessageFromNative(messageJSON) {
        console.log(messageJSON);
        if (receiveMessageQueue) {
            receiveMessageQueue.push(messageJSON);
        }
        _dispatchMessageFromNative(messageJSON);
       
    }
    ```

  - [ ] dispatchMessageFromNative方法，在messageHandlers中通过message.handlerName来查找要调用的js方法

    ```
    //提供给native使用,
    function _dispatchMessageFromNative(messageJSON) {
        setTimeout(function() {
            var message = JSON.parse(messageJSON);
            var responseCallback;
            //java call finished, now need to call js callback function
            if (message.responseId) {
                responseCallback = responseCallbacks[message.responseId];
                if (!responseCallback) {
                    return;
                }
                responseCallback(message.responseData);
                delete responseCallbacks[message.responseId];
            } else {
                //直接发送
                if (message.callbackId) {
                    var callbackResponseId = message.callbackId;
                    responseCallback = function(responseData) {
                        _doSend({
                            responseId: callbackResponseId,
                            responseData: responseData
                        });
                    };
                }
    
                var handler = WebViewJavascriptBridge._messageHandler;
                if (message.handlerName) {
                    handler = messageHandlers[message.handlerName];
                }
                //查找指定handler
                try {
                    handler(message.data, responseCallback);
                } catch (exception) {
                    if (typeof console != 'undefined') {
                        console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception);
                    }
                }
            }
        });
    }
    ```

  - [ ] 注册js方法

    ```
    // 注册线程 往数组里面添加值
    function registerHandler(handlerName, handler) {
        messageHandlers[handlerName] = handler;
    }
    ```

  - [ ] demo.html中注册了js方法

    ```
    connectWebViewJavascriptBridge(function(bridge) {
        bridge.init(function(message, responseCallback) {
            console.log('JS got a message', message);
            var data = {
                'Javascript Responds': '测试中文!'
            };
    
            if (responseCallback) {
                console.log('JS responding with', data);
                responseCallback(data);
            }
        });
    
        bridge.registerHandler("functionInJs", function(data, responseCallback) {
            document.getElementById("show").innerHTML = ("data from Java: = " + data);
            if (responseCallback) {
                var responseData = "Javascript Says Right back aka!";
                responseCallback(responseData);
            }
        });
    })
    ```

- js回调数据给native

  - [ ] 回调方法

    ```
    responseCallback(responseData);
    ```

  - [ ] 调用_doSend方法

    ```
    responseCallback = function(responseData) {
        _doSend({
            responseId: callbackResponseId,
            responseData: responseData
        });
    };
    ```

  - [ ] _doSend方法首先将message入队，然后改变src，触发shouldOverideUrlLoading方法

    ```
    function _doSend(message, responseCallback) {
        if (responseCallback) {
            var callbackId = 'cb_' + (uniqueId++) + '_' + new Date().getTime();
            responseCallbacks[callbackId] = responseCallback;
            message.callbackId = callbackId;
        }
    
        sendMessageQueue.push(message);
        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
    }
    ```

  - [ ] 调用webView.flushMessageQueue()方法，调用js的_fetchQueue方法，拉取js一侧的消息列表，然后遍历

  - flushMessageQueue方法

    ```
    loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, new CallBackFunction())
    ```

    ```
    public void loadUrl(String jsUrl, CallBackFunction returnCallback) {
      this.loadUrl(jsUrl);
      // 添加至 Map<String, CallBackFunction>
      responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);
    }
    ```

  - js的_fetchQueue方法

    ```
    function _fetchQueue() {
        var messageQueueString = JSON.stringify(sendMessageQueue);
        sendMessageQueue = [];
        //android can't read directly the return data, so we can reload iframe src to communicate with java
        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://return/_fetchQueue/' + encodeURIComponent(messageQueueString);
    }
    ```

  - webview的handleReturnData方法

    ```
    void handlerReturnData(String url) {
      String functionName = BridgeUtil.getFunctionFromReturnUrl(url);
      CallBackFunction f = responseCallbacks.get(functionName);
      String data = BridgeUtil.getDataFromReturnUrl(url);
      if (f != null) {
        f.onCallBack(data);
        responseCallbacks.remove(functionName);
        return;
      }
    }
    ```

  - 遍历消息

    ```
    new CallBackFunction() {
    
      @Override
      public void onCallBack(String data) {
        // deserializeMessage 反序列化消息
        List<Message> list = null;
        try {
          list = Message.toArrayList(data);
        } catch (Exception e) {
          e.printStackTrace();
          return;
        }
        if (list == null || list.size() == 0) {
          return;
        }
        for (int i = 0; i < list.size(); i++) {
          Message m = list.get(i);
          String responseId = m.getResponseId();
          // 是否是response  CallBackFunction
          if (!TextUtils.isEmpty(responseId)) {
            CallBackFunction function = responseCallbacks.get(responseId);
            String responseData = m.getResponseData();
            function.onCallBack(responseData);
            responseCallbacks.remove(responseId);
          } else {
            CallBackFunction responseFunction = null;
            // if had callbackId 如果有回调Id
            final String callbackId = m.getCallbackId();
            if (!TextUtils.isEmpty(callbackId)) {
              responseFunction = new CallBackFunction() {
                @Override
                public void onCallBack(String data) {
                  Message responseMsg = new Message();
                  responseMsg.setResponseId(callbackId);
                  responseMsg.setResponseData(data);
                  queueMessage(responseMsg);
                }
              };
            } else {
              responseFunction = new CallBackFunction() {
                @Override
                public void onCallBack(String data) {
                  // do nothing
                }
              };
            }
            // BridgeHandler执行
            BridgeHandler handler;
            if (!TextUtils.isEmpty(m.getHandlerName())) {
              handler = messageHandlers.get(m.getHandlerName());
            } else {
              handler = defaultHandler;
            }
            if (handler != null) {
              handler.handler(m.getData(), responseFunction);
            }
          }
        }
      }
    }
    ```

  - 回调java方法

    ```
    CallBackFunction function = responseCallbacks.get(responseId);
    String responseData = m.getResponseData();
    function.onCallBack(responseData);
    responseCallbacks.remove(responseId);
    ```

  

  

  

  

  ## js调用native方法

  - 入口

    ```
    //call native method
    window.WebViewJavascriptBridge.callHandler(
        'submitFromWeb'
        , {'param': '中文测试'}
        , function(responseData) {
            document.getElementById("show").innerHTML = "send get responseData from java, data = " + responseData
        }
    );
    ```

  - callHandler调用_doSend方法

    ```
    function callHandler(handlerName, data, responseCallback) {
        _doSend({
            handlerName: handlerName,
            data: data
        }, responseCallback);
    }
    ```

    ```
    //sendMessage add message, 触发native处理 sendMessage
    function _doSend(message, responseCallback) {
        if (responseCallback) {
            var callbackId = 'cb_' + (uniqueId++) + '_' + new Date().getTime();
            responseCallbacks[callbackId] = responseCallback;
            message.callbackId = callbackId;
        }
    
        sendMessageQueue.push(message);
        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
    }
    ```

  - _fetchQueue方法 在CallFunction中遍历后，设置了回调后，在messageHandlers中找到要调用的native方法

    ```
    CallBackFunction responseFunction = null;
      // if had callbackId 如果有回调Id
      final String callbackId = m.getCallbackId();
      if (!TextUtils.isEmpty(callbackId)) {
        responseFunction = new CallBackFunction() {
          @Override
          public void onCallBack(String data) {
            Message responseMsg = new Message();
            responseMsg.setResponseId(callbackId);
            responseMsg.setResponseData(data);
            queueMessage(responseMsg);
          }
        };
      } else {
        responseFunction = new CallBackFunction() {
          @Override
          public void onCallBack(String data) {
            // do nothing
          }
        };
      }
      // BridgeHandler执行
      BridgeHandler handler;
      if (!TextUtils.isEmpty(m.getHandlerName())) {
        handler = messageHandlers.get(m.getHandlerName());
      } else {
        handler = defaultHandler;
      }
      if (handler != null) {
        handler.handler(m.getData(), responseFunction);
      }
    }
    ```

  - 方法handler.handler(m.getData(), responseFunction)

  - native方法执行完后，回调js

    ```
    webView.registerHandler("submitFromWeb", new BridgeHandler() {
    
      @Override
      public void handler(String data, CallBackFunction function) {
        Log.i(TAG, "handler = submitFromWeb, data from web = " + data);
        function.onCallBack("submitFromWeb exe, response data 中文 from Java");
      }
    
    });
    ```

  - 回调js

    ```
    Message responseMsg = new Message();
    responseMsg.setResponseId(callbackId);
    responseMsg.setResponseData(data);
    queueMessage(responseMsg);
    ```

  - 调用dispatchMessage(m)



